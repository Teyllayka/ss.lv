version: "3.8"

services:
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always

  chat:
    build:
      context: ./chat
    container_name: chat
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgres://user:password@db:5432/mydb
      REFRESH_SECRET:  "123"
      ACCESS_SECRET:   "123"
    depends_on:
      - backend
      - db
    networks:
      - app-network
    restart: always

  frontend:
    build:
      context: ./frontend
      args:
        PUBLIC_API_URL: /backend
    container_name: frontend
    ports:
      - "4173:3000"
    environment:
      PUBLIC_API_URL: /backend
      PUBLIC_CHAT_API: http:/nginx/chat
      CHAT_SSR_BASE: http://chat:4000
    depends_on:
      - backend
      - chat
    networks:
      - app-network
    restart: always

  backend:
    build: ./backend
    container_name: backend
    ports:
      - "8000:80"
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: always

  db:
    image: postgres:15
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  db_data:
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
