version: "3.8"

services:
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${NGINX_CONF}:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt  
      - ./certbot/www:/var/www/certbot 
      - ./htpasswd:/etc/nginx/.htpasswd:ro
    networks:
      - app-network
    depends_on:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #   command: >
  #     /bin/sh -c '
  #       while true; do
  #         certbot renew --webroot --webroot-path=/var/www/certbot --quiet \
  #           && nginx -s reload || true
  #         sleep 12h
  #       done
  #     '
  #   restart: always
  #   depends_on:
  #     - nginx

  chat:
    build:
      context: ./chat
    container_name: chat
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgres://user:password@db:5432/mydb
      REDIS_URL: "redis://redis:6379"
      REFRESH_SECRET:  "123"
      ACCESS_SECRET:   "123"
    depends_on:
      - db
    networks:
      - app-network
    restart: always

  frontend:
    build:
      context: ./frontend
      args:
        PUBLIC_API_URL: /backend
    container_name: frontend
    ports:
      - "4173:3000"
    environment:
      PUBLIC_API_URL: /backend
      PUBLIC_CHAT_API: https://ad-ee.tech
      BODY_SIZE_LIMIT: 100M
    depends_on:
      - backend
      - chat
      - nginx
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - app-network
    restart: always

  backend:
    build: ./backend
    container_name: backend
    ports:
      - "8000:80"
    env_file:
      - .env
    environment:
        DATABASE_URL:   "postgres://user:password@db:5432/mydb"
        REDIS_URL:      "redis://redis:6379"
        ACCESS_SECRET:  "123"
        REFRESH_SECRET: "123"
        EMAIL_SECRET:   "secret"
        BACKEND_IP:     "0.0.0.0"
        BACKEND_PORT:   "80"
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: always

  db:
    image: postgres:15
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - app-network
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  db_data:
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
